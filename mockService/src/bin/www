#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express4-demo:server');
var http = require('http');
var config = require('../config');
var util = require('util');
var opn = require('opn');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.NODE_PORT || config.port);

// if(process.env.NODE_APP_INSTANCE){//pm2的集群模式，端口按照初始端口+进程号
//     // port += parseInt(process.env.NODE_APP_INSTANCE);

//     logger.info('当前环境：' + config.env, "进程"+ process.env.NODE_APP_INSTANCE, ' 监听端口:' + port, util.formatDate(+new Date()));
// } else{
//     logger.info('当前环境：' + config.env, '监听端口'+ port, util.formatDate(+new Date()));
// }


app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen({
    host: '0.0.0.0',
    port: port
});
server.on('error', onError);
server.on('listening', onListening);

// 异常捕获
process.on('uncaughtException', function (err) {
    logger.error("进程异常", err.stack);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
	debug('Listening on ' + bind);

	// opn('http://localhost:' + port);

	console.log(`当前启动服务：http://localhost:${port}`);
}
